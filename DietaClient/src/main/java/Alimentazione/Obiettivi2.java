package Alimentazione;
import Alimentazione.Obiettivi1;
import Impostazioni.Calendario;
import Utente.Dashboard;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bernardo and Paolo
 */
public class Obiettivi2 extends javax.swing.JFrame {

    private Calendario calendario;
    private Proprieta attivita;
    
    /**
     * Creates new form Obiettivi2
     */
    public Obiettivi2() {
        initComponents();
        calendario = new Calendario();
        attivita = new Proprieta();
        String msg = attivita.getObiettiviMacronutrienti();
        esisteObiettivo(msg);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        background = new javax.swing.JPanel();
        titolo = new javax.swing.JLabel();
        grassi = new javax.swing.JLabel();
        calorie = new javax.swing.JLabel();
        carboidrati = new javax.swing.JLabel();
        proteine = new javax.swing.JLabel();
        calorieResult = new javax.swing.JLabel();
        carboidratiResult = new javax.swing.JLabel();
        grassiResult = new javax.swing.JLabel();
        proteineResult = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        colazioneTab = new javax.swing.JPanel();
        colazione_totale = new javax.swing.JLabel();
        colazione_assunta = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabellaColazione = new javax.swing.JTable();
        spuntinoTab = new javax.swing.JPanel();
        spuntino_totale = new javax.swing.JLabel();
        spuntino_assunto = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabellaSpuntino = new javax.swing.JTable();
        pranzoTab = new javax.swing.JPanel();
        pranzo_totale = new javax.swing.JLabel();
        pranzo_assunto = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabellaPranzo = new javax.swing.JTable();
        cenaTab = new javax.swing.JPanel();
        cena_totale = new javax.swing.JLabel();
        cena_assunta = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabellaCena = new javax.swing.JTable();
        cambiaObiettivo = new javax.swing.JButton();
        inserisciBtn = new javax.swing.JButton();
        eliminaBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        background.setBackground(new java.awt.Color(231, 76, 60));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titolo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        titolo.setForeground(new java.awt.Color(255, 255, 255));
        titolo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titolo.setText("Obiettivi di oggi");
        background.add(titolo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 40));

        grassi.setForeground(new java.awt.Color(255, 255, 255));
        grassi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        grassi.setText("Grassi");
        background.add(grassi, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, -1, -1));

        calorie.setForeground(new java.awt.Color(255, 255, 255));
        calorie.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        calorie.setText("Calorie");
        background.add(calorie, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, -1));

        carboidrati.setForeground(new java.awt.Color(255, 255, 255));
        carboidrati.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        carboidrati.setText("Carboidrati");
        background.add(carboidrati, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, -1, -1));

        proteine.setForeground(new java.awt.Color(255, 255, 255));
        proteine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        proteine.setText("Proteine");
        background.add(proteine, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, -1, -1));

        calorieResult.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        calorieResult.setForeground(new java.awt.Color(255, 255, 255));
        calorieResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        calorieResult.setText("jLabel1");
        background.add(calorieResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 120, 30));

        carboidratiResult.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        carboidratiResult.setForeground(new java.awt.Color(255, 255, 255));
        carboidratiResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        carboidratiResult.setText("jLabel1");
        background.add(carboidratiResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 140, 30));

        grassiResult.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        grassiResult.setForeground(new java.awt.Color(255, 255, 255));
        grassiResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        grassiResult.setText("jLabel1");
        background.add(grassiResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 120, 30));

        proteineResult.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        proteineResult.setForeground(new java.awt.Color(255, 255, 255));
        proteineResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        proteineResult.setText("jLabel1");
        background.add(proteineResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 130, 30));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setForeground(new java.awt.Color(255, 0, 51));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        colazioneTab.setBackground(new java.awt.Color(255, 255, 255));
        colazioneTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        colazione_totale.setText("Calorie totali da assumere: ");
        colazioneTab.add(colazione_totale, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        colazione_assunta.setText("Calorie attualmente assunte:");
        colazioneTab.add(colazione_assunta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        tabellaColazione.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alimento", "Grammi", "Calorie (kcal)", "Carboidrati (g)", "Proteine (g)", "Grassi (g)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabellaColazione.setRowHeight(25);
        tabellaColazione.setRowMargin(5);
        jScrollPane2.setViewportView(tabellaColazione);

        colazioneTab.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 540, 240));

        jTabbedPane1.addTab("Colazione", colazioneTab);

        spuntinoTab.setBackground(new java.awt.Color(255, 255, 255));
        spuntinoTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        spuntino_totale.setText("Calorie totali da assumere: ");
        spuntinoTab.add(spuntino_totale, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        spuntino_assunto.setText("Calorie attualmente assunte:");
        spuntinoTab.add(spuntino_assunto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        tabellaSpuntino.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alimento", "Grammi", "Calorie (kcal)", "Carboidrati (g)", "Proteine (g)", "Grassi (g)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabellaSpuntino.setRowHeight(25);
        tabellaSpuntino.setRowMargin(5);
        jScrollPane3.setViewportView(tabellaSpuntino);

        spuntinoTab.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 540, 240));

        jTabbedPane1.addTab("Spuntino", spuntinoTab);

        pranzoTab.setBackground(new java.awt.Color(255, 255, 255));
        pranzoTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pranzo_totale.setText("Calorie totali da assumere: ");
        pranzoTab.add(pranzo_totale, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        pranzo_assunto.setText("Calorie attualmente assunte:");
        pranzoTab.add(pranzo_assunto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        tabellaPranzo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alimento", "Grammi", "Calorie (kcal)", "Carboidrati (g)", "Proteine (g)", "Grassi (g)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabellaPranzo.setRowHeight(25);
        tabellaPranzo.setRowMargin(5);
        jScrollPane4.setViewportView(tabellaPranzo);

        pranzoTab.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 540, 240));

        jTabbedPane1.addTab("Pranzo", pranzoTab);

        cenaTab.setBackground(new java.awt.Color(255, 255, 255));
        cenaTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cena_totale.setText("Calorie totali da assumere: ");
        cenaTab.add(cena_totale, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        cena_assunta.setText("Calorie attualmente assunte:");
        cenaTab.add(cena_assunta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        tabellaCena.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alimento", "Grammi", "Calorie (kcal)", "Carboidrati (g)", "Proteine (g)", "Grassi (g)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabellaCena.setRowHeight(25);
        tabellaCena.setRowMargin(5);
        jScrollPane5.setViewportView(tabellaCena);

        cenaTab.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 540, 240));

        jTabbedPane1.addTab("Cena", cenaTab);

        background.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 560, 350));

        cambiaObiettivo.setText("Cambia obiettivo");
        cambiaObiettivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cambiaObiettivoMouseClicked(evt);
            }
        });
        background.add(cambiaObiettivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 560, 160, -1));

        inserisciBtn.setText("Assumi alimento");
        inserisciBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inserisciBtnMouseClicked(evt);
            }
        });
        background.add(inserisciBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 560, 160, -1));

        eliminaBtn.setText("Elimina alimento");
        eliminaBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminaBtnMouseClicked(evt);
            }
        });
        background.add(eliminaBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 560, 160, -1));

        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cambiaObiettivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cambiaObiettivoMouseClicked
        Obiettivi1 obiettivi1 = new Obiettivi1();
        obiettivi1.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_cambiaObiettivoMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Dashboard dash = new Dashboard();
        dash.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void inserisciBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inserisciBtnMouseClicked
        RicercaAlimento ra = new RicercaAlimento();
        ra.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_inserisciBtnMouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        int tab = jTabbedPane1.getSelectedIndex();
        Proprieta prop = new Proprieta();
        prop.getAlimento();
        ArrayList<String> temp = new ArrayList<String>(10);
        switch(tab) {
            case 0: DefaultTableModel model = (DefaultTableModel) tabellaColazione.getModel();
                    for(int i = tabellaColazione.getRowCount()-1; i >= 0; i--) {
                        model.removeRow(i);
                    }
                    temp = prop.getAlimentiColazione();
                    if(temp.size() != 0) {
                        for(int i = 0; i < temp.size() / 6; i++) {
                            model.addRow(new Object[]{temp.get(i*6), temp.get(i*6+1), temp.get(i*6+2), temp.get(i*6+3), temp.get(i*6+4), temp.get(i*6+5)});
                        }
                    }
                    break;
            case 1: DefaultTableModel modelSpuntino = (DefaultTableModel) tabellaSpuntino.getModel();
                    for(int i = tabellaSpuntino.getRowCount()-1; i >= 0; i--) {
                        modelSpuntino.removeRow(i);
                    }
                    temp = prop.getAlimentiSpuntino();
                    if(temp.size() != 0) {
                        for(int i = 0; i < temp.size() / 6; i++) {
                            modelSpuntino.addRow(new Object[]{temp.get(i*6), temp.get(i*6+1), temp.get(i*6+2), temp.get(i*6+3), temp.get(i*6+4), temp.get(i*6+5)});
                        }
                    }
                    break;
            case 2: DefaultTableModel modelPranzo = (DefaultTableModel) tabellaPranzo.getModel();
                    for(int i = tabellaPranzo.getRowCount()-1; i >= 0; i--) {
                        modelPranzo.removeRow(i);
                    }
                    temp = prop.getAlimentiPranzo();
                    if(temp.size() != 0) {
                        for(int i = 0; i < temp.size() / 6; i++) {
                            modelPranzo.addRow(new Object[]{temp.get(i*6), temp.get(i*6+1), temp.get(i*6+2), temp.get(i*6+3), temp.get(i*6+4), temp.get(i*6+5)});
                        }
                    }
                    break;
            case 3: DefaultTableModel modelCena = (DefaultTableModel) tabellaCena.getModel();
                    for(int i = tabellaCena.getRowCount()-1; i >= 0; i--) {
                        modelCena.removeRow(i);
                    }
                    temp = prop.getAlimentiCena();
                    if(temp.size() != 0) {
                        for(int i = 0; i < temp.size() / 6; i++) {
                            modelCena.addRow(new Object[]{temp.get(i*6), temp.get(i*6+1), temp.get(i*6+2), temp.get(i*6+3), temp.get(i*6+4), temp.get(i*6+5)});
                        }
                    }
                    break;
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void eliminaBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminaBtnMouseClicked
        Map dati = new HashMap();
        int row = 10;
        int tab = jTabbedPane1.getSelectedIndex();
        switch(tab) {
            case 0: row = tabellaColazione.getSelectedRow();
                    dati.put("alimento", tabellaColazione.getModel().getValueAt(row, 0).toString());
                    dati.put("grammi", tabellaColazione.getModel().getValueAt(row, 1).toString());
                    dati.put("calorie", tabellaColazione.getModel().getValueAt(row, 2).toString());
                    dati.put("carboidrati", tabellaColazione.getModel().getValueAt(row, 3).toString());
                    dati.put("proteine", tabellaColazione.getModel().getValueAt(row, 4).toString());
                    dati.put("grassi", tabellaColazione.getModel().getValueAt(row, 5).toString());
                    dati.put("pasto", "Colazione");
                    break;
            case 1: row = tabellaSpuntino.getSelectedRow();
                    dati.put("alimento", tabellaSpuntino.getModel().getValueAt(row, 0).toString());
                    dati.put("grammi", tabellaSpuntino.getModel().getValueAt(row, 1).toString());
                    dati.put("calorie", tabellaSpuntino.getModel().getValueAt(row, 2).toString());
                    dati.put("carboidrati", tabellaSpuntino.getModel().getValueAt(row, 3).toString());
                    dati.put("proteine", tabellaSpuntino.getModel().getValueAt(row, 4).toString());
                    dati.put("grassi", tabellaSpuntino.getModel().getValueAt(row, 5).toString());
                    dati.put("pasto", "Spuntino");
                    break;
            case 2: row = tabellaPranzo.getSelectedRow();
                    dati.put("alimento", tabellaPranzo.getModel().getValueAt(row, 0).toString());
                    dati.put("grammi", tabellaPranzo.getModel().getValueAt(row, 1).toString());
                    dati.put("calorie", tabellaPranzo.getModel().getValueAt(row, 2).toString());
                    dati.put("carboidrati", tabellaPranzo.getModel().getValueAt(row, 3).toString());
                    dati.put("proteine", tabellaPranzo.getModel().getValueAt(row, 4).toString());
                    dati.put("grassi", tabellaPranzo.getModel().getValueAt(row, 5).toString());
                    dati.put("pasto", "Pranzo");
                    break;    
            case 3: row = tabellaCena.getSelectedRow();
                    dati.put("alimento", tabellaCena.getModel().getValueAt(row, 0).toString());
                    dati.put("grammi", tabellaCena.getModel().getValueAt(row, 1).toString());
                    dati.put("calorie", tabellaCena.getModel().getValueAt(row, 2).toString());
                    dati.put("carboidrati", tabellaCena.getModel().getValueAt(row, 3).toString());
                    dati.put("proteine", tabellaCena.getModel().getValueAt(row, 4).toString());
                    dati.put("grassi", tabellaCena.getModel().getValueAt(row, 5).toString());
                    dati.put("pasto", "Cena");
                    break;  
        }
        String msg = "";
        if(dati.isEmpty() && row == 10) {
            msg = "Seleziona una riga per eliminarla.";
        } else {
            msg = attivita.eliminaAlimentoAssunto(dati);
        }
        JOptionPane.showMessageDialog(null, msg, "Alimento eliminato", JOptionPane.INFORMATION_MESSAGE);
         this.setVisible(false);
        Obiettivi2 obt2 = new Obiettivi2();
        obt2.setVisible(true);
    }//GEN-LAST:event_eliminaBtnMouseClicked

    public void esisteObiettivo(String msg) {
        if(msg.equals("L'obiettivo esiste")) {
            attivita.getObiettivoPasto("colazione");
            attivita.getObiettivoPasto("cena");
            attivita.getObiettivoPasto("pranzo");
            attivita.getObiettivoPasto("spuntino");
            setObiettiviMacronutrienti();
            setObiettivoPasto("Colazione");
            setObiettivoPasto("Spuntino");
            setObiettivoPasto("Pranzo");
            setObiettivoPasto("Cena");
        } else {
            int n = JOptionPane.showConfirmDialog(null, msg + ".\nVuoi impostare un nuovo obiettivo adesso?", "Obiettivo", JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION) {
                Obiettivi1 obiettivi1 = new Obiettivi1();
                obiettivi1.setVisible(true);
            } else {
                Dashboard dash = new Dashboard();
                dash.setVisible(true);
            }
        }
    }
    
    public void setObiettiviMacronutrienti() {
        calorieResult.setText(attivita.getCalorieTotaliAssunte() + "/" + attivita.getCalorieTotali() + "kcal");
        carboidratiResult.setText(attivita.getCarboidratiAssunti() + "/" + attivita.getCarboidratiTotali() + "g");
        proteineResult.setText(attivita.getProteineAssunte() + "/" + attivita.getProteineTotali() + "g");
        grassiResult.setText(attivita.getGrassiAssunti() + "/" + attivita.getGrassiTotali() + "g");
        
    }
    
    public void setObiettivoPasto(String pasto) {
        if(pasto.equals("Colazione")) {
            colazione_totale.setText("Calorie totali da assumere: " + attivita.getColazioneTotale() + "kcal");
            colazione_assunta.setText("Calorie attualmente assunte: " + attivita.getColazioneAssunta() + "kcal");
        } else if (pasto.equals("Spuntino")) {
            spuntino_totale.setText("Calorie totali da assumere: " + attivita.getSpuntinoTotale() + "kcal");
            spuntino_assunto.setText("Calorie attualmente assunte: " + attivita.getSpuntinoAssunto() + "kcal");
        } else if (pasto.equals("Pranzo")) {
            pranzo_totale.setText("Calorie totali da assumere: " + attivita.getPranzoTotale() + "kcal");
            pranzo_assunto.setText("Calorie attualmente assunte: " + attivita.getPranzoAssunto() + "kcal");
        } else if (pasto.equals("Cena")) {
            cena_totale.setText("Calorie totali da assumere: " + attivita.getCenaTotale() + "kcal");
            cena_assunta.setText("Calorie attualmente assunte: " + attivita.getCenaAssunta() + "kcal");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Obiettivi2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Obiettivi2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Obiettivi2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Obiettivi2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Obiettivi2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JLabel calorie;
    private javax.swing.JLabel calorieResult;
    private javax.swing.JButton cambiaObiettivo;
    private javax.swing.JLabel carboidrati;
    private javax.swing.JLabel carboidratiResult;
    private javax.swing.JPanel cenaTab;
    private javax.swing.JLabel cena_assunta;
    private javax.swing.JLabel cena_totale;
    private javax.swing.JPanel colazioneTab;
    private javax.swing.JLabel colazione_assunta;
    private javax.swing.JLabel colazione_totale;
    private javax.swing.JButton eliminaBtn;
    private javax.swing.JLabel grassi;
    private javax.swing.JLabel grassiResult;
    private javax.swing.JButton inserisciBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pranzoTab;
    private javax.swing.JLabel pranzo_assunto;
    private javax.swing.JLabel pranzo_totale;
    private javax.swing.JLabel proteine;
    private javax.swing.JLabel proteineResult;
    private javax.swing.JPanel spuntinoTab;
    private javax.swing.JLabel spuntino_assunto;
    private javax.swing.JLabel spuntino_totale;
    private javax.swing.JTable tabellaCena;
    private javax.swing.JTable tabellaColazione;
    private javax.swing.JTable tabellaPranzo;
    private javax.swing.JTable tabellaSpuntino;
    private javax.swing.JLabel titolo;
    // End of variables declaration//GEN-END:variables
}
